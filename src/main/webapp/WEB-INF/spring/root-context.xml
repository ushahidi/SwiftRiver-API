<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jdbc 
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.1.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">

	<!-- Component scanning -->
	<context:component-scan base-package="com.ushahidi.swiftriver.core.api.dao,com.ushahidi.swiftriver.core.api.service" />

	<bean id="bcryptPasswordEncoder"
		class="com.ushahidi.swiftriver.core.api.auth.CustomBCryptPasswordEncoder" />

	<!-- Service Beans -->
	<bean id="accountService" class="com.ushahidi.swiftriver.core.api.service.AccountService">
		<property name="key" ref="encryptionKey" />
	</bean>

	<!-- Jackson Mapper -->
	<bean id="jacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="jacksonObjectMapper" />
		<property name="targetMethod" value="configure" />
		<property name="arguments">
			<list>
				<value type="org.codehaus.jackson.map.DeserializationConfig.Feature">FAIL_ON_UNKNOWN_PROPERTIES</value>
				<value>false</value>
			</list>
		</property>
	</bean>

	<bean id="objectToStringDozerConverter"
		class="com.ushahidi.swiftriver.core.support.dozer.ObjectToStringConverter">
		<property name="objectMapper" ref="jacksonObjectMapper" />
	</bean>
	
	<bean id="ruleActionToStringDozerConverter"
		class="com.ushahidi.swiftriver.core.support.dozer.RuleActionListToStringConverter">
		<property name="objectMapper" ref="jacksonObjectMapper" />
	</bean>
	
	<bean id="ruleConditionToStringDozerConverter"
		class="com.ushahidi.swiftriver.core.support.dozer.RuleConditionListToStringConverter">
		<property name="objectMapper" ref="jacksonObjectMapper" />
	</bean>

	<!-- Bean Mapper -->
	<bean id="mapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>config/dozer-bean-mappings.xml</value>
			</list>
		</property>
		<property name="customConverters">
			<list>
				<ref bean="objectToStringDozerConverter" />
				<ref bean="ruleActionToStringDozerConverter" />
				<ref bean="ruleConditionToStringDozerConverter" />
			</list>
		</property>
	</bean>

	<!-- Enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.ushahidi.swiftriver.core.model" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="false" />
				<property name="generateDdl" value="false" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
			</bean>
		</property>
	</bean>
	
	<!-- Enable DataAccessException translation -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- Data Sources -->
	<beans profile="prod">
		<jee:jndi-lookup id="dataSource" jndi-name="jdbc/SwiftRiverDB"
			expected-type="javax.sql.DataSource" />

		<jee:jndi-lookup id="encryptionKey" jndi-name="encryptionKey"
			expected-type="java.lang.String" />

		<bean id="mqProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="ignoreUnresolvablePlaceholders" value="true" />
			<property name="properties">
				<bean class="java.util.Properties">
					<constructor-arg>
						<map>
							<entry key="mq.host">
								<jee:jndi-lookup jndi-name="mqHost" />
							</entry>
							<entry key="mq.username">
								<jee:jndi-lookup jndi-name="mqUser" />
							</entry>
							<entry key="mq.password">
								<jee:jndi-lookup jndi-name="mqPass" />
							</entry>
						</map>
					</constructor-arg>
				</bean>
			</property>
		</bean>

		<!-- RabbitMQ Connection -->
		<rabbit:connection-factory id="rabbitConnectionFactory"
			host="${mq.host}" username="${mq.username}" password="${mq.password}" />

		<!-- Metadata Exchange -->
		<rabbit:topic-exchange name="chatter" durable="true" />

		<!-- Declare the Queues, Exchanged defined here. -->
		<rabbit:admin connection-factory="rabbitConnectionFactory" />

		<bean id="messageConverter"
			class="org.springframework.amqp.support.converter.JsonMessageConverter" />

		<rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory"
			exchange="chatter" message-converter="messageConverter" />
	</beans>

	<beans profile="test">
		<bean id="encryptionKey" class="java.lang.String">
			<constructor-arg value="2344228477#97{7&amp;6&gt;82" />
		</bean>

		<jdbc:embedded-database id="dataSource" type="H2">
			<jdbc:script location="classpath:config/sql/schema.sql" />
			<jdbc:script location="classpath:config/sql/test-data.sql" />
		</jdbc:embedded-database>

		<bean id="amqpTemplate" class="com.ushahidi.swiftriver.core.support.MockAmqpTemplate" />
	</beans>
</beans>